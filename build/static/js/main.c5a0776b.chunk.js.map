{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","game","name","isLoaded","a","fetch","this","headers","json","setState","console","error","window","location","reload","log","items","relation","list_items","Object","entries","forEach","key","value","push","Item","style","textAlign","margin","height","actions","onClick","RestartGame","getGame","orientation","background","color","setGame","onChange","e","target","width","marginBottom","placeholder","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAGMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,KAAM,GACNC,UAAU,GALK,E,kFASnB,4BAAAC,EAAA,+EAEuBC,MAAM,wBAAD,OAAyBC,KAAKN,MAAME,MAAQ,CAClEK,QAAS,CACP,8BAA+B,IAC/B,eAAgB,sBALxB,cAEUN,EAFV,YAQIK,KARJ,SAQgCL,EAAKO,OARrC,yBAQoBP,KARpB,WAQSQ,SART,gBASIH,KAAKG,SAAS,CAAEN,UAAU,IAT9B,kDAWIO,QAAQC,MAAR,MAXJ,0D,kHAgBA,4BAAAP,EAAA,+EAEuBC,MAAM,YAAa,CACpCE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,sBALxB,cAEUN,EAFV,YAQIK,KARJ,SAQgCL,EAAKO,OARrC,yBAQoBP,KARpB,WAQSQ,SART,kEAUIC,QAAQC,MAAR,MAVJ,0D,sHAcA,sBAAAP,EAAA,+EAEUC,MAAM,iBAAkB,CAC5BE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,sBALxB,OAQIK,OAAOC,SAASC,SARpB,+CAUIJ,QAAQC,MAAR,MAVJ,wD,0EAcA,WAAU,IAAD,OACP,GAAKL,KAAKN,MAAMG,SAQX,CACHO,QAAQK,IAAIT,KAAKN,MAAMC,MACvB,IAAMe,EAAQV,KAAKN,MAAMC,KAAKgB,UAAY,GAC1CP,QAAQK,IAAIC,GACZ,IAAME,EAAa,GAKnB,OAJAC,OAAOC,QAAQJ,GAAOK,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KAC9CL,EAAWM,KAAK,eAAC,IAAKC,KAAN,CAAWC,MAAO,CAAEC,UAAW,UAA/B,UAA2C,iCAASL,IAApD,IAAmEC,SAInF,eAAC,IAAD,CAAMG,MAAO,CAAEE,OAAQ,SAAUC,OAAQ,SACvCC,QAAS,CACP,cAAC,IAAD,CAAQC,QAAS,kBAAM,EAAKC,eAA5B,qHACA,cAAC,IAAD,CAAQD,QAAS,kBAAM,EAAKE,WAA5B,0GAHJ,UAME,cAAC,IAAD,CAASC,YAAY,SAArB,wKACA,cAAC,IAAD,UACGhB,OA1BiB,OACxB,cAAC,IAAD,CAAMQ,MAAO,CAAEG,OAAQ,SAAWC,QAAS,CACzC,cAAC,IAAD,CAAQJ,MAAO,CAAES,WAAY,MAAOC,MAAO,SAA3C,qHACA,cAAC,IAAD,CAAQL,QAAO,sBAAE,sBAAA3B,EAAA,sEAAkB,EAAKiC,UAAvB,mFAAjB,6EAFF,SAIE,cAAC,IAAD,CAAOC,SAAU,SAACC,GAAD,OAAO,EAAK9B,SAAS,CAAEP,KAAMqC,EAAEC,OAAOjB,SAAUG,MAAO,CAAEe,MAAO,OAAQC,aAAc,IAAMC,YAAY,wE,GA5D/GC,IAAMC,WAyFT/C,IChFAgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c5a0776b.chunk.js","sourcesContent":["import React from 'react';\nimport { Input, List, Divider, Button, Card } from 'antd';\nimport 'antd/dist/antd.css';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: {},\n      name: \"\",\n      isLoaded: false,\n    }\n  }\n\n  async setGame() {\n    try {\n      const game = await fetch(`/api/game/add-player/${this.state.name}`, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        }\n      });\n      this.setState({ game: await game.json() });\n      this.setState({ isLoaded: true });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n\n  async getGame() {\n    try {\n      const game = await fetch(`/api/game`, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        }\n      })\n      this.setState({ game: await game.json() });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async RestartGame() {\n    try {\n      await fetch(`/api/game/stop`, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        }\n      });\n      window.location.reload();\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  render() {\n    if (!this.state.isLoaded) return (\n      <Card style={{ height: '100vh' }} actions={[\n        <Button style={{ background: \"red\", color: 'white' }}>Перезагрузить игру</Button>,\n        <Button onClick={async () => await this.setGame()}>Зайти в игру</Button>\n      ]}>\n        <Input onChange={(e) => this.setState({ name: e.target.value })} style={{ width: '100%', marginBottom: 10 }} placeholder=\"Введите имя\" />\n      </Card>\n    )\n    else {\n      console.log(this.state.game);\n      const items = this.state.game.relation || {};\n      console.log(items);\n      const list_items = []\n      Object.entries(items).forEach(([key, value]) => {\n        list_items.push(<List.Item style={{ textAlign: 'center' }}><strong>{key}</strong>:{value}</List.Item>)\n      })\n\n      return (\n        <Card style={{ margin: '0 auto', height: '100vh' }}\n          actions={[\n            <Button onClick={() => this.RestartGame()}>Перезагрузить игру</Button>,\n            <Button onClick={() => this.getGame()}>Обновить игроков</Button>\n          ]}\n        >\n          <Divider orientation=\"center\">То что загадали другие игроки</Divider>\n          <List>\n            {list_items}\n          </List>\n        </Card>\n      )\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}